#!/usr/bin/env node

var
  fs = require('fs'),
  path = require('path'),
  program = require('commander'),
  repl = require('repl'),
  util = require('util'),

  version = require('./../package.json').version,
  joolaio = global.joolaio = require('joola.io.sdk');

var configPath = path.join(__dirname, '../config.json');
if (fs.existsSync(configPath)) {
  var config = require(configPath);
  Object.keys(config).forEach(function (key) {
    program[key] = config[key];
  });
}

program
  .version(version)
  .option('-h, --host [http://localhost:8080]', 'joola.io host (http://hostname:port)', 'http://localhost:8080')
  .option('-u, --username [username]', 'username for login with joola.io')
  .option('-p, --password [password]', 'password for login with joola.io')
  .option('-a, --apitoken [apitoken]', 'APIToken to use instead of username/password')
  .option('-e, --eval [script]', 'javascript to execute and close');

program
  .command('get')
  .description('joola.io get <key>')
  .action(function (key) {
    console.log(key, program[key]);
    process.exit();
  });

program
  .command('set')
  .description('joola.io set <key> <value>')
  .action(function (key, value) {
    program[key] = value;
    if (!config)
      config = {};
    config[key] = value;
    fs.writeFileSync(configPath, JSON.stringify(config));
    process.exit();
  });

program
  .command('clear')
  .description('joola.io clear <key>')
  .action(function (key) {
    delete program[key]
    if (config)
      delete config[key];
    fs.writeFileSync(configPath, JSON.stringify(config));
    process.exit();
  });

program.parse(process.argv);

console.log('joola.io.cli (' + version + ') starting...');
console.log('Connecting to joola.io @ ' + program.host + '...');

if (program.apitoken) {
  joolaio.init({APIToken: program.apitoken, host: program.host, debug: {enabled: false}}, function (err) {
    if (err)
      throw err;

    startCLI();
  });
}
else if (program.username && program.password) {
  joolaio.init({host: program.host, debug: {enabled: false}}, function (err) {
    if (err)
      throw err;

    joolaio.users.authenticate('joola', program.username, program.password, function (err, token) {
      if (err)
        throw err;
      joolaio.USER = token.user;
      joolaio.TOKEN = token;
      startCLI();
    });
  });
}
else {
  console.error('Autentication failed, no login details provided.');
  process.exit();
}


var startCLI = function () {
  console.log('');

  var self = this;
  ['q', 'exit', 'quit'].forEach(function (key) {
    self.__defineGetter__(key, function () {
      process.exit();
    });
  });

  this.__defineGetter__('help', function () {
    var helptext = {};

    var inspect = joolaio.api.describe;
    if (inspect) {
      Object.keys(inspect).forEach(function (key) {
        var elem = inspect[key];
        helptext[key] = {};
        Object.keys(elem).forEach(function (elemKey) {
          var attribute = elem[elemKey];
          helptext[key][elemKey] = {
            endpoint: attribute.name,
            description: attribute.description,
            params: attribute.inputs
          }
        });
      });
      console.log(util.inspect(helptext, {depth: null, colors: true}));
    }
    else
      console.error(what + ' unknown');
  });

  var _repl = repl.start({
    prompt: 'joola.io ' + joolaio.USER.username + '@' + program.host.replace('http://', '').replace('https://', '') + ' > ',
    input: process.stdin,
    output: process.stdout,
    useGlobal: true,
    eval: function (cmd, context, filename, callback) {
      try {
        var result;
        if (cmd.substring(0, 1) === '(')
          cmd = cmd.substring(1, cmd.length - 2);
        if (cmd.indexOf('joolaio.') > -1 && cmd.indexOf('(') > -1) {
          var fn = function (err, result) {
            return callback(err, result);
          };
          var inject = fn.toString();
          if (cmd.indexOf(',') > -1)
            cmd = cmd.replace(')', ',' + inject + ')');
          else if (cmd.indexOf('()') > -1)
            cmd = cmd.replace(')', inject + ')');
          else
            cmd = cmd.replace(')', ',' + inject + ')');

          eval(cmd);
        }
        else {
          result = eval(cmd);
          return callback(null, result);
        }

      }
      catch (ex) {
        if (typeof callback === 'function')
          return callback(ex);
        else {
          console.error(ex);
        }
      }
    }
  });
  require('repl.history')(_repl, 'joolaio_repl_history');
  if (program.eval) {
    _repl.eval(program.eval, null, null, function (err, result) {
      console.log(util.inspect(result, {depth: null, colors: true}));
      exit();
    });
  }
};